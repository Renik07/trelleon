import { useState } from 'react';
import styles from '@/styles/Home.module.css'
import Head from 'next/head';
import Image from 'next/image';
import axios from 'axios';
import { Buffer } from 'buffer';

import Cards from '../components/Cards';
import logo from '../public/img/logo.svg';

const idBoard = {
    casino: process.env.BOARD_ID,
    bookmaker: process.env.BOOKMAKER_ID
};

const Home = ({ data }) => {

    const [search, setSearch] = useState('');

    const handleSearch = (event) => {
        setSearch(event.target.value);
    }
    // 
    const filteredData = data.filter(card => {
        return card.name.toLowerCase().includes(search.toLowerCase())
    });

    return (
        <>
            <Head>
                <title>Leon | Trello | Cards</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <meta name="referrer" content="no-referrer" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <div className="container">
                    <Image
                        className='logo'
                        src={logo}
                        alt="Logo Leon"
                    />
                    <input placeholder='Поиск' className='input' type='text' value={search} onChange={handleSearch} />
                    <div className="grid">
                        <Cards data={filteredData} />
                    </div>
                </div>
            </main>
        </>
    );
};

export async function getStaticProps() {
    const YANDEX_DISK_TOKEN = process.env.YANDEX_DISK_TOKEN;

    const API_KEY = process.env.API_KEY;
    const API_TOKEN = process.env.API_TOKEN;

    const LIST_ID_DONE = process.env.LIST_ID_DONE; // casino board
    const LIST_ID_ARCHIVE = process.env.LIST_ID_ARCHIVE; // casino board

    const LIST_ID_DONE_BM = process.env.LIST_ID_DONE_BOOK; // bookmaker board
    const LIST_ID_ARCHIVE_BM = process.env.LIST_ID_ARCHIVE_BOOK; // bookmaker board

    // 1. Запрос карточек необходимых колонок
    const fetchCardsByListId = async (listId, headers) => {
        const url = `https://api.trello.com/1/lists/${listId}/cards?fields=name,desc,cover,idBoard,board,labels,shortUrl&members=true&key=${API_KEY}&token=${API_TOKEN}&attachments=true`;
        const response = await fetch(url, { headers });
        const data = await response.json();
        return data;
    };


    const downloadImage = async (url, filename, API_KEY, API_TOKEN) => {
        try {
            const response = await fetch(url, {
                headers: {
                    Authorization: `OAuth oauth_consumer_key="${API_KEY}", oauth_token="${API_TOKEN}"`,
                },
            });
            if (!response.ok) {
                throw new Error(`Failed to download image: ${response.status} ${response.statusText}`);
            }

            const buffer = await response.arrayBuffer();

            // Отправка изображения на Яндекс.Диск
            const uploadUrl = 'https://cloud-api.yandex.net/v1/disk/resources/upload';

            const uploadResponse = await axios({
                method: 'GET',
                url: uploadUrl,
                headers: {
                    Authorization: `OAuth ${YANDEX_DISK_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                params: {
                    path: `Leon/${filename}`, // Путь, по которому вы хотите сохранить изображение на Яндекс.Диске
                    overwrite: false, // Заменить существующий файл, если он уже существует
                },
            });

            const uploadData = uploadResponse.data;

            await axios({
                method: 'PUT',
                url: uploadData.href,
                headers: {
                    Authorization: `OAuth ${YANDEX_DISK_TOKEN}`,
                    'Content-Type': 'image/jpeg', // Предполагается, что изображение является JPEG-файлом
                },
                data: Buffer.from(buffer),
            });
        } catch (error) {
            console.error('Error while downloading image:', error);
        }
    };

    // 5. 
    const getImageUrl = async (card, API_KEY, API_TOKEN) => {
        // Проверяем наличие изображения на Яндекс.Диске
        const checkUrl = `https://cloud-api.yandex.net/v1/disk/resources?path=Leon/${card.id}.jpg`;
        try {
            const checkResponse = await axios({
                method: 'GET',
                url: checkUrl,
                headers: {
                    Authorization: `OAuth ${YANDEX_DISK_TOKEN}`,
                },
            });

            // Если изображение уже существует на Яндекс.Диске, возвращаем его URL
            if (checkResponse.status === 200) {
                const imageUrl = checkResponse.data.file;
                return imageUrl;
            }
        } catch (error) {
            // Если произошла ошибка при проверке, игнорируем и продолжаем загрузку изображения
            // return null;
        }

        // Если изображения нет на Яндекс.Диске, загружаем его
        await downloadImage(
            `https://api.trello.com/${card.cover.scaled[4].url.slice(19)}`,
            `${card.id}.jpg`,
            API_KEY,
            API_TOKEN
        );

        // После загрузки изображения, возвращаем URL-адрес Яндекс.Диска
        const imageUrl = `https://disk.yandex.ru/i/${card.id}`;
        return imageUrl;
    };
    try {
        const headers = {
            Authorization: `OAuth oauth_consumer_key="${API_KEY}", oauth_token="${API_TOKEN}"`
        };

        // 2. Получаем карточки колонок
        const responseListIDs = await Promise.all([
            fetchCardsByListId(LIST_ID_DONE, headers),
            fetchCardsByListId(LIST_ID_ARCHIVE, headers),
            fetchCardsByListId(LIST_ID_DONE_BM, headers),
            fetchCardsByListId(LIST_ID_ARCHIVE_BM, headers),
        ]);

        // 3. Фильтруем только те карточки, у которых есть обложки
        const allCards = responseListIDs.reduce((cards, response) => {
            const cardsWithCovers = response.filter(card => card.cover && card.cover.scaled);
            return [...cards, ...cardsWithCovers];
        }, []);

        // 4. Добавляем в каждую карточку URL-обложки и название доски где она находится 
        const updatedAllCards = await Promise.all(
            allCards.map(async (card) => {
                const coverUrl = await getImageUrl(card, API_KEY, API_TOKEN);
                let nameBoard = '';
                if (card.idBoard) {
                    if (card.idBoard === idBoard.casino) nameBoard = 'CASINO';
                    if (card.idBoard === idBoard.bookmaker) nameBoard = 'BOOKMAKER';
                }
                return { ...card, coverUrl, nameBoard };
            })
        );
        return {
            props: {
                data: updatedAllCards,
            },
            revalidate: 900,
        };
    } catch (error) {
        console.error('Ошибка при получении карточек колонки:', error);
        return {
            props: {
                data: [],
            }
        };
    }
}

export default Home;